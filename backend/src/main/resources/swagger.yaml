openapi: 3.0.1
info:
  title: Pokemon Center Api
  description: Pokemon Center Api
  version: 1.0.0
servers:
  - url: /
paths:
  /login:
    post:
      summary: Valida dados do login.
      operationId: validarLogin
      tags:
        - Login
      parameters:
        - in: header
          name: email
          required: true
          description: email
          schema:
            type: string
            example: "alexandre@email.com"
        - in: header
          name: senha
          required: true
          description: senha
          schema:
            type: string
            example: "123456"
      responses:
        '200':
          description: dados corretos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'
        '401':
          description: dados incorretos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /endereco:
    post:
      summary: Cadastro de um novo endereço na base de endereços.
      operationId: cadastrar
      tags:
        - Base endereço
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endereco'
      responses:
        '200':
          description: Sucesso ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'
        '500':
          description: Erro ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'


  /cadastro/pessoa:
    post:
      summary: Realiza o cadastro de uma pessoas no banco de dados.
      operationId: cadastrarPessoa
      tags:
        - Cadastro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pessoa'
      responses:
        '200':
          description: Sucesso ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'
        '500':
          description: Erro ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'


  /cadastro/funcionario:
    post:
      summary: Realiza o cadastro de um funcionário no banco de dados.
      operationId: cadastrarFuncionario
      tags:
        - Cadastro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/funcionario'
      responses:
        '200':
          description: Sucesso ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'
        '500':
          description: Erro ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /cadastro/medico:
    post:
      summary: Realiza o cadastro de um médico no banco de dados.
      operationId: cadastrarMedico
      tags:
        - Cadastro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/medico'
      responses:
        '200':
          description: Sucesso ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'
        '500':
          description: Erro ao realizar cadastro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /agendamento/especialidades:
    get:
      summary: Retorna especialidades disponíveis.
      operationId: getEspecialidade
      tags:
        - Agendamento
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/especialidade'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /agendamento/medicos:
    get:
      summary: Retorna lista médicos com determinada especialidade.
      operationId: getMedicos
      parameters:
        - in: query
          required: true
          name: especialidade
          schema:
            type: string
            example: "ortopedista"
          description: "especialidade do médico"
      tags:
        - Agendamento
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dadosMedico'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /agendamento/horario:
    get:
      summary: Retorna horarios disponiveis para agendamento com determinado médico.
      operationId: getHorarios
      parameters:
        - in: query
          required: true
          name: crm
          schema:
            type: string
            example: "152223"
          description: "código médico"
        - in: query
          required: true
          name: data
          schema:
            type: string
            example: "15/02/2021"
          description: "código médico"
      tags:
        - Agendamento
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/horarioAgendamento'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /consulta/enderecos:
    get:
      summary: Retorna endereços disponiveis na base de endereços.
      operationId: getEnderecos
      tags:
        - Consultar Dados
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/endereco'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /consulta/funcionarios:
    get:
      summary: Retorna lista com os dados dos funcionarios cadastrados.
      operationId: getFuncionarios
      tags:
        - Consultar Dados
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/funcionario'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /consulta/pacientes:
    get:
      summary: Retorna lista com os dados dos pacientes cadastrados.
      operationId: getPacientes
      tags:
        - Consultar Dados
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/paciente'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'

  /consulta/agendamentos:
    get:
      summary: Retorna lista dos agendamentos cadastrados.
      description: Pode ser realizado um filtro passando o código médico
      operationId: getAgendamentos
      tags:
        - Consultar Dados
      parameters:
        - in: header
          name: crm
          description: código médico
          schema:
            type: string
            example: "151515"
      responses:
        '200':
          description: Sucesso na requisicao.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/agenda'

        '400':
          description: Erro ao requisitar dados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mensagem'


components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  # 2) Apply the security globally to all operations

  schemas:
    mensagem:
      type: object
      properties:
        mensagem:
          type: string
          example: "descricão"

    pessoa:
      type: object
      properties:
        cpf:
          type: string
          example: "15984533"
        nome:
          type: string
          example: "Gabriel Arrighi"
        email:
          type: string
          example: "arrighi@gmail.com"
        telefone:
          type: string
          example: 38999225757
        cep:
          type: string
          example: 30190002
        lougadouro:
          type: string
          example: "Avenida Augusto de Lima"
        bairro:
          type: string
          example: "Barro Preto"
        cidade:
          type: string
          example: "Belo Horizonte"
        estado:
          type: string
          example: "Minas Gerais"


    funcionario:
      type: object
      properties:
        cpf:
          type: string
          example: "15984533"
        nome:
          type: string
          example: "Gabriel Arrighi"
        email:
          type: string
          example: "arrighi@gmail.com"
        telefone:
          type: string
          example: 38999225757
        cep:
          type: string
          example: 30190002
        lougadouro:
          type: string
          example: "Avenida Augusto de Lima"
        bairro:
          type: string
          example: "Barro Preto"
        cidade:
          type: string
          example: "Belo Horizonte"
        estado:
          type: string
          example: "Minas Gerais"
        dataContrato:
          type: string
          example: "Avenida Augusto de Lima"
        salario:
          type: number
          example: 15.000,00
        senha:
          type: string
          example: "Belo Horizonte"


    medico:
      type: object
      properties:
        cpf:
          type: string
          example: "15984533"
        nome:
          type: string
          example: "Gabriel Arrighi"
        email:
          type: string
          example: "arrighi@gmail.com"
        telefone:
          type: string
          example: 38999225757
        cep:
          type: string
          example: 30190002
        lougadouro:
          type: string
          example: "Avenida Augusto de Lima"
        bairro:
          type: string
          example: "Barro Preto"
        cidade:
          type: string
          example: "Belo Horizonte"
        estado:
          type: string
          example: "Minas Gerais"
        dataContrato:
          type: string
          example: "Avenida Augusto de Lima"
        salario:
          type: number
          example: 15.000,00
        senha:
          type: string
          example: "Belo Horizonte"
        especialidade:
          type: array
          items:
            $ref: '#/components/schemas/especialidade'
        crm:
          type: string
          example: "15555"
        codigo:
          type: string
          example: "15984533"

    especialidade:
      type: string
      example: "ortopedista"

    paciente:
      type: object
      properties:
        nome:
          type: string
          example: "Pikachu"
        peso:
          type: number
          example: 53.5
        altura:
          type: number
          example: 0.56
        tipoSanguineo:
          type: string
          example: "A+"
        cfpDono:
          type: string
          example: "15984533"
        codigoPokemon:
          type: string
          example: "15984533"



    agenda:
      type: object
      properties:
        data:
          type: string
          example: "15/12/2021"
        horario:
          type: string
          example: "17:00"
        nomePokemon:
          type: string
          example: "picachu"
        codigoPokemon:
          type: string
          example: "15984533"
        nomeDono:
          type: string
          example: "Alexandre"
        cpf:
          type: string
          example: "15984533"
        email:
          type: string
          example: "fabricio@email.com"
        telefone:
          type: string
          example: 99263303
        codigoMedico:
          type:  string
          example: "11111165"

    endereco:
      type: object
      properties:
        cep:
          type: string
          example: 30190002
        lougadouro:
          type: string
          example: "Avenida Augusto de Lima"
        bairro:
          type: string
          example: "Barro Preto"
        cidade:
          type: string
          example: "Belo Horizonte"
        estado:
          type: string
          example: "Minas Gerais"

    dadosMedico:
      type: object
      properties:
        nome:
          type: string
          example: "Fabricio Januário"
        crm:
          type: string
          example: "5655656565"

    horarioAgendamento:
      type: array
      items:
        $ref: '#/components/schemas/horariosDisponiveis'

    horariosDisponiveis:
      type: string
      example: "15:00"

